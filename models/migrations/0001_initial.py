# Generated by Django 5.0 on 2025-10-07 19:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly category identifier', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('icon', models.CharField(blank=True, help_text='Icon class (e.g., fa-code, fa-paint-brush)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('TEACHER', 'Teacher'), ('ADMIN', 'Admin')], default='STUDENT', help_text='User role in the system', max_length=10)),
                ('bio', models.TextField(blank=True, help_text='User biography', null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='user_uploads/profiles/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('expertise', models.CharField(blank=True, help_text='Teacher expertise/specialization', max_length=200, null=True)),
                ('qualification', models.TextField(blank=True, help_text='Teacher qualifications', null=True)),
                ('education_level', models.CharField(blank=True, help_text='Student education level', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Course title', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly course identifier', max_length=200, unique=True)),
                ('description', models.TextField(help_text='Course description')),
                ('level', models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced')], default='BEGINNER', help_text='Course difficulty level', max_length=15)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived')], default='DRAFT', help_text='Course publication status', max_length=10)),
                ('thumbnail', models.ImageField(blank=True, help_text='Course thumbnail image', null=True, upload_to='courses/thumbnails/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='Course price (0 for free)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_hours', models.PositiveIntegerField(default=0, help_text='Estimated course duration in hours')),
                ('max_students', models.PositiveIntegerField(blank=True, help_text='Maximum number of students (null for unlimited)', null=True)),
                ('prerequisites', models.TextField(blank=True, help_text='Course prerequisites')),
                ('learning_objectives', models.TextField(blank=True, help_text='What students will learn')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this course on homepage')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average course rating', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_ratings', models.PositiveIntegerField(default=0, help_text='Total number of ratings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('category', models.ForeignKey(help_text='Course category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='models.category')),
                ('teacher', models.ForeignKey(help_text='Course instructor', limit_choices_to={'role': 'TEACHER'}, on_delete=django.db.models.deletion.CASCADE, related_name='courses_taught', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'db_table': 'courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Content title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Content description')),
                ('content_type', models.CharField(choices=[('VIDEO', 'Video'), ('DOCUMENT', 'Document'), ('QUIZ', 'Quiz'), ('TEXT', 'Text')], help_text='Type of content', max_length=10)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within course')),
                ('duration_minutes', models.PositiveIntegerField(default=0, help_text='Estimated time to complete (in minutes)')),
                ('is_preview', models.BooleanField(default=False, help_text='Can be previewed without enrollment')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Must be completed to finish course')),
                ('text_content', models.TextField(blank=True, help_text='Text/HTML content (for TEXT type)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(help_text='Associated course', on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='models.course')),
            ],
            options={
                'verbose_name': 'Content',
                'verbose_name_plural': 'Contents',
                'db_table': 'contents',
                'ordering': ['course', 'order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Document file', upload_to='documents/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'ppt', 'pptx', 'txt'])])),
                ('file_size_mb', models.DecimalField(blank=True, decimal_places=2, help_text='File size in MB', max_digits=10, null=True)),
                ('download_count', models.PositiveIntegerField(default=0, help_text='Number of downloads')),
                ('content', models.OneToOneField(help_text='Associated content', on_delete=django.db.models.deletion.CASCADE, related_name='document', to='models.content')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'db_table': 'documents',
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('DROPPED', 'Dropped'), ('SUSPENDED', 'Suspended')], default='ACTIVE', help_text='Enrollment status', max_length=10)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True, help_text='Enrollment date')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Course completion date', null=True)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Course completion progress', max_digits=5)),
                ('last_accessed_at', models.DateTimeField(auto_now=True, help_text='Last time student accessed course')),
                ('is_active', models.BooleanField(default=True, help_text='Is enrollment active')),
                ('payment_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount paid for enrollment', max_digits=10)),
                ('payment_date', models.DateTimeField(blank=True, help_text='Payment date', null=True)),
                ('rating', models.PositiveIntegerField(blank=True, help_text='Student rating (1-5)', null=True)),
                ('review', models.TextField(blank=True, help_text='Student review')),
                ('review_date', models.DateTimeField(blank=True, help_text='Review submission date', null=True)),
                ('course', models.ForeignKey(help_text='Enrolled course', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='models.course')),
                ('student', models.ForeignKey(help_text='Enrolled student', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'db_table': 'enrollments',
                'ordering': ['-enrolled_at'],
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_number', models.CharField(help_text='Unique certificate number', max_length=50, unique=True)),
                ('issued_date', models.DateTimeField(auto_now_add=True, help_text='Certificate issue date')),
                ('certificate_file', models.FileField(blank=True, help_text='Generated certificate PDF', null=True, upload_to='certificates/', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('verification_code', models.CharField(help_text='Certificate verification code', max_length=100, unique=True)),
                ('is_verified', models.BooleanField(default=True, help_text='Is certificate valid')),
                ('enrollment', models.OneToOneField(help_text='Associated enrollment', on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='models.enrollment')),
            ],
            options={
                'verbose_name': 'Certificate',
                'verbose_name_plural': 'Certificates',
                'db_table': 'certificates',
                'ordering': ['-issued_date'],
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Exam title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Exam description and instructions')),
                ('exam_type', models.CharField(choices=[('QUIZ', 'Quiz'), ('MIDTERM', 'Midterm'), ('FINAL', 'Final'), ('PRACTICE', 'Practice')], default='QUIZ', help_text='Type of exam', max_length=10)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Exam duration in minutes')),
                ('total_marks', models.PositiveIntegerField(default=100, help_text='Total marks for the exam')),
                ('passing_marks', models.PositiveIntegerField(help_text='Minimum marks required to pass')),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Maximum number of attempts allowed', validators=[django.core.validators.MinValueValidator(1)])),
                ('is_published', models.BooleanField(default=False, help_text='Is exam available to students')),
                ('is_required', models.BooleanField(default=True, help_text='Must be passed to complete course')),
                ('randomize_questions', models.BooleanField(default=True, help_text='Randomize question order for each attempt')),
                ('show_results_immediately', models.BooleanField(default=True, help_text='Show results immediately after submission')),
                ('start_date', models.DateTimeField(blank=True, help_text='Exam availability start date', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='Exam availability end date', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(help_text='Associated course', on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='models.course')),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
                'db_table': 'exams',
                'ordering': ['course', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.PositiveIntegerField(default=1, help_text='Attempt number')),
                ('status', models.CharField(choices=[('IN_PROGRESS', 'In Progress'), ('SUBMITTED', 'Submitted'), ('GRADED', 'Graded')], default='IN_PROGRESS', help_text='Exam attempt status', max_length=15)),
                ('score', models.DecimalField(decimal_places=2, default=0.0, help_text='Score obtained', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Percentage score', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_passed', models.BooleanField(default=False, help_text='Did student pass the exam')),
                ('answers', models.JSONField(default=dict, help_text='Student answers (question_id: answer)')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('time_taken_minutes', models.PositiveIntegerField(default=0, help_text='Time taken to complete exam')),
                ('feedback', models.TextField(blank=True, help_text='Teacher feedback')),
                ('exam', models.ForeignKey(help_text='Associated exam', on_delete=django.db.models.deletion.CASCADE, related_name='results', to='models.exam')),
                ('student', models.ForeignKey(help_text='Student who took the exam', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='exam_results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Exam Result',
                'verbose_name_plural': 'Exam Results',
                'db_table': 'exam_results',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_time_spent_minutes', models.PositiveIntegerField(default=0, help_text='Total time spent on course (minutes)')),
                ('last_accessed_at', models.DateTimeField(auto_now=True, help_text='Last access time')),
                ('notes', models.TextField(blank=True, help_text='Student notes for this course')),
                ('course', models.ForeignKey(help_text='Course', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='models.course')),
                ('last_accessed_content', models.ForeignKey(blank=True, help_text='Last accessed content', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_accessed_by', to='models.content')),
                ('student', models.ForeignKey(help_text='Student', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progress',
                'verbose_name_plural': 'Progress',
                'db_table': 'progress',
                'ordering': ['-last_accessed_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False, help_text='Has student completed this content')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Completion date', null=True)),
                ('time_spent_minutes', models.PositiveIntegerField(default=0, help_text='Time spent on this content (minutes)')),
                ('video_progress_seconds', models.PositiveIntegerField(default=0, help_text='Video playback position (seconds)')),
                ('video_watched_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Percentage of video watched', max_digits=5)),
                ('last_page_viewed', models.PositiveIntegerField(default=0, help_text='Last page viewed in document')),
                ('attempts_count', models.PositiveIntegerField(default=0, help_text='Number of attempts (for quiz content)')),
                ('last_accessed_at', models.DateTimeField(auto_now=True, help_text='Last time content was accessed')),
                ('content', models.ForeignKey(help_text='Content item', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='models.content')),
                ('progress', models.ForeignKey(help_text='Overall progress record', on_delete=django.db.models.deletion.CASCADE, related_name='content_progress', to='models.progress')),
            ],
            options={
                'verbose_name': 'Content Progress',
                'verbose_name_plural': 'Content Progress',
                'db_table': 'content_progress',
                'ordering': ['content__order'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Question text')),
                ('question_type', models.CharField(choices=[('MULTIPLE_CHOICE', 'Multiple Choice'), ('TRUE_FALSE', 'True/False'), ('SHORT_ANSWER', 'Short Answer'), ('ESSAY', 'Essay')], default='MULTIPLE_CHOICE', help_text='Type of question', max_length=20)),
                ('marks', models.PositiveIntegerField(default=1, help_text='Marks for this question')),
                ('order', models.PositiveIntegerField(default=0, help_text='Question order in exam')),
                ('explanation', models.TextField(blank=True, help_text='Explanation of correct answer (shown after exam)')),
                ('correct_answer', models.CharField(blank=True, help_text='Correct answer identifier (A, B, C, D, TRUE, FALSE)', max_length=10)),
                ('image', models.ImageField(blank=True, help_text='Question image (optional)', null=True, upload_to='questions/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.ForeignKey(help_text='Associated exam', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='models.exam')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'questions',
                'ordering': ['exam', 'order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField(help_text='Answer option text')),
                ('identifier', models.CharField(help_text='Answer identifier (A, B, C, D)', max_length=10)),
                ('is_correct', models.BooleanField(default=False, help_text='Is this the correct answer')),
                ('order', models.PositiveIntegerField(default=0, help_text='Answer option order')),
                ('question', models.ForeignKey(help_text='Associated question', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='models.question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'db_table': 'answers',
                'ordering': ['question', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_file', models.FileField(blank=True, help_text='Video file', null=True, upload_to='videos/', validators=[django.core.validators.FileExtensionValidator(['mp4', 'avi', 'mov', 'wmv'])])),
                ('video_url', models.URLField(blank=True, help_text='External video URL (YouTube, Vimeo, etc.)', null=True)),
                ('thumbnail', models.ImageField(blank=True, help_text='Video thumbnail', null=True, upload_to='videos/thumbnails/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('quality', models.CharField(blank=True, help_text='Video quality (e.g., 720p, 1080p)', max_length=10)),
                ('file_size_mb', models.DecimalField(blank=True, decimal_places=2, help_text='File size in MB', max_digits=10, null=True)),
                ('content', models.OneToOneField(help_text='Associated content', on_delete=django.db.models.deletion.CASCADE, related_name='video', to='models.content')),
            ],
            options={
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videos',
                'db_table': 'videos',
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', '-created_at'], name='courses_status_d82f31_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['teacher', 'status'], name='courses_teacher_e56881_idx'),
        ),
        migrations.AddIndex(
            model_name='content',
            index=models.Index(fields=['course', 'order'], name='contents_course__d86511_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['student', 'status'], name='enrollments_student_929bef_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['course', 'status'], name='enrollments_course__931283_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'course')},
        ),
        migrations.AddIndex(
            model_name='exam',
            index=models.Index(fields=['course', 'is_published'], name='exams_course__88a174_idx'),
        ),
        migrations.AddIndex(
            model_name='examresult',
            index=models.Index(fields=['student', '-started_at'], name='exam_result_student_3b2f98_idx'),
        ),
        migrations.AddIndex(
            model_name='examresult',
            index=models.Index(fields=['exam', 'student'], name='exam_result_exam_id_007d8e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='examresult',
            unique_together={('exam', 'student', 'attempt_number')},
        ),
        migrations.AlterUniqueTogether(
            name='progress',
            unique_together={('student', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='contentprogress',
            unique_together={('progress', 'content')},
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['exam', 'order'], name='questions_exam_id_6a4fc8_idx'),
        ),
    ]
